{
  "info": {
    "name": "Bauprodukt Demo API",
    "description": "Complete API collection for testing Bauprodukt Demo application with Enhanced Content System, Waitlist Management, and Audit Logging. Includes Cart management, Order processing, Product variant management, Swiss VFG enhanced products with structured content tabs (BESCHREIBUNG, TECHNISCHE DATEN, ZUBEHÖR), PDF attachments, Waitlist workflow for product approval, and comprehensive Audit logging. All products support both variant and non-variant modes seamlessly.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "bauprodukt-demo",
    "version": {
      "major": 1,
      "minor": 5,
      "patch": 0
    }
  },
  "item": [
    {
      "name": "Brands",
      "item": [
        {
          "name": "Get All Brands",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/brands?page=1&limit=10",
              "host": ["{{base_url}}"],
              "path": ["api", "brands"],
              "query": [
                {
                  "key": "page",
                  "value": "1",
                  "description": "Page number"
                },
                {
                  "key": "limit",
                  "value": "10",
                  "description": "Items per page"
                },
                {
                  "key": "search",
                  "value": "",
                  "description": "Search by brand name",
                  "disabled": true
                }
              ]
            },
            "description": "Retrieve all brands with pagination and optional search"
          }
        },
        {
          "name": "Search Brands",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/brands?search=bosch&page=1&limit=10",
              "host": ["{{base_url}}"],
              "path": ["api", "brands"],
              "query": [
                {
                  "key": "search",
                  "value": "bosch"
                },
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            },
            "description": "Search brands by name"
          }
        },
        {
          "name": "Create Brand",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Bosch\",\n  \"slug\": \"bosch\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/brands",
              "host": ["{{base_url}}"],
              "path": ["api", "brands"]
            },
            "description": "Create a new brand"
          }
        },
        {
          "name": "Create Brand (Auto Slug)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Makita Power Tools\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/brands",
              "host": ["{{base_url}}"],
              "path": ["api", "brands"]
            },
            "description": "Create brand with auto-generated slug from name"
          }
        },
        {
          "name": "Get Brand by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/brands/{{brand_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "brands", "{{brand_id}}"]
            },
            "description": "Get a specific brand by ID"
          }
        },
        {
          "name": "Update Brand",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Bosch Professional\",\n  \"slug\": \"bosch-professional\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/brands/{{brand_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "brands", "{{brand_id}}"]
            },
            "description": "Update an existing brand"
          }
        },
        {
          "name": "Delete Brand",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/brands/{{brand_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "brands", "{{brand_id}}"]
            },
            "description": "Delete a brand (only if not used by products)"
          }
        }
      ],
      "description": "Brand management endpoints"
    },
    {
      "name": "Categories",
      "item": [
        {
          "name": "Get All Categories",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/categories?page=1&limit=10",
              "host": ["{{base_url}}"],
              "path": ["api", "categories"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "key": "search",
                  "value": "",
                  "disabled": true
                },
                {
                  "key": "parent_id",
                  "value": "",
                  "disabled": true,
                  "description": "Filter by parent category ID"
                }
              ]
            },
            "description": "Get all categories with optional filters"
          }
        },
        {
          "name": "Get Root Categories",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/categories?parent_id=null",
              "host": ["{{base_url}}"],
              "path": ["api", "categories"],
              "query": [
                {
                  "key": "parent_id",
                  "value": "null"
                }
              ]
            },
            "description": "Get only root categories (no parent)"
          }
        },
        {
          "name": "Create Root Category",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Güç Aletleri\",\n  \"slug\": \"guc-aletleri\",\n  \"emoji\": \"🔧\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/categories",
              "host": ["{{base_url}}"],
              "path": ["api", "categories"]
            },
            "description": "Create a root category"
          }
        },
        {
          "name": "Create Subcategory",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Matkap\",\n  \"slug\": \"matkap\",\n  \"emoji\": \"🔨\",\n  \"parent_id\": \"{{category_id}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/categories",
              "host": ["{{base_url}}"],
              "path": ["api", "categories"]
            },
            "description": "Create a subcategory with parent"
          }
        },
        {
          "name": "Get Category by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/categories/{{category_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "categories", "{{category_id}}"]
            },
            "description": "Get a specific category by ID"
          }
        },
        {
          "name": "Update Category",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Professional Güç Aletleri\",\n  \"slug\": \"professional-guc-aletleri\",\n  \"emoji\": \"⚙️\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/categories/{{category_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "categories", "{{category_id}}"]
            },
            "description": "Update an existing category"
          }
        },
        {
          "name": "Delete Category",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/categories/{{category_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "categories", "{{category_id}}"]
            },
            "description": "Delete a category"
          }
        }
      ],
      "description": "Category management endpoints"
    },
    {
      "name": "Products",
      "item": [
        {
          "name": "Get All Products",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/products?page=1&limit=10",
              "host": ["{{base_url}}"],
              "path": ["api", "products"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "key": "search",
                  "value": "",
                  "disabled": true
                },
                {
                  "key": "brand",
                  "value": "",
                  "disabled": true,
                  "description": "Filter by brand ID"
                },
                {
                  "key": "category",
                  "value": "",
                  "disabled": true,
                  "description": "Filter by category ID"
                },
                {
                  "key": "stock_code",
                  "value": "",
                  "disabled": true,
                  "description": "Filter by stock code"
                }
              ]
            },
            "description": "Get all products with optional filters"
          }
        },
        {
          "name": "Search Products",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/products?search=matkap&page=1&limit=10",
              "host": ["{{base_url}}"],
              "path": ["api", "products"],
              "query": [
                {
                  "key": "search",
                  "value": "matkap"
                },
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            },
            "description": "Search products by name"
          }
        },
        {
          "name": "Filter Products by Brand",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/products?brand={{brand_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "products"],
              "query": [
                {
                  "key": "brand",
                  "value": "{{brand_id}}"
                }
              ]
            },
            "description": "Filter products by brand"
          }
        },
        {
          "name": "Search Products by Stock Code",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/products?stock_code={{stock_code}}",
              "host": ["{{base_url}}"],
              "path": ["api", "products"],
              "query": [
                {
                  "key": "stock_code",
                  "value": "{{stock_code}}"
                }
              ]
            },
            "description": "Search products by stock code"
          }
        },
        {
          "name": "Filter Products by Variant ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/products?variant={{variant_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "products"],
              "query": [
                {
                  "key": "variant",
                  "value": "{{variant_id}}",
                  "description": "Filter products that have this specific variant"
                }
              ]
            },
            "description": "Filter products that have a specific variant ID"
          }
        },
        {
          "name": "Create Product",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Bosch Professional GSB 18V-55 Akülü Darbeli Matkap\",\n  \"slug\": \"bosch-professional-gsb-18v-55-akulu-darbeli-matkap\",\n  \"description\": \"18V Li-ion akülü darbeli matkap. Metal ve ahşap delme işlemleri için ideal.\",\n  \"price\": 899.99,\n  \"stock\": 25,\n  \"stock_code\": \"BSH-GSB18V55\",\n  \"image_url\": \"https://example.com/images/bosch-drill.jpg\",\n  \"brand_id\": \"{{brand_id}}\",\n  \"category_id\": \"{{category_id}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/products",
              "host": ["{{base_url}}"],
              "path": ["api", "products"]
            },
            "description": "Create a new product"
          }
        },
        {
          "name": "Create Product (Minimal)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Makita DHP484Z Akülü Darbeli Matkap\",\n  \"price\": 750.00,\n  \"stock\": 15,\n  \"stock_code\": \"MKT-DHP484Z\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/products",
              "host": ["{{base_url}}"],
              "path": ["api", "products"]
            },
            "description": "Create product with minimal required fields"
          }
        },
        {
          "name": "Get Product by ID (Default Variant)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/products/{{product_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "products", "{{product_id}}"]
            },
            "description": "Get a specific product by ID with default/synthetic variant information, brand, category, enhanced content (features_list), and PDF attachments. Returns selected_variant with product's default pricing/stock, available_variants array (empty if no variants), and variant_attributes for UI selection."
          },
          "response": [
            {
              "name": "Product Response with Variant Structure",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/api/products/{{product_id}}",
                  "host": ["{{base_url}}"],
                  "path": ["api", "products", "{{product_id}}"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"id\": \"product-id\",\n  \"name\": \"Example Product\",\n  \"price\": 100.00,\n  \"has_variants\": false,\n  \"selected_variant\": {\n    \"id\": \"synthetic-variant-id\",\n    \"sku\": \"product-sku\",\n    \"price\": 100.00,\n    \"compare_at_price\": null,\n    \"stock_quantity\": 50,\n    \"is_default\": true,\n    \"is_synthetic\": true,\n    \"attributes\": []\n  },\n  \"available_variants\": [],\n  \"variant_attributes\": [],\n  \"brand\": {\n    \"id\": \"brand-id\",\n    \"name\": \"Brand Name\"\n  },\n  \"category\": {\n    \"id\": \"category-id\",\n    \"name\": \"Category Name\"\n  }\n}"
            }
          ]
        },
        {
          "name": "Get Product with Enhanced Content (Real Example)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/products/1efbdad3-b582-495e-8484-5f89ea6dffbb",
              "host": ["{{base_url}}"],
              "path": ["api", "products", "1efbdad3-b582-495e-8484-5f89ea6dffbb"]
            },
            "description": "Get real product example (Dusch-WC Geberit AquaClean Alba) with enhanced content structure showing features_list, content_summary, and PDFs"
          },
          "response": [
            {
              "name": "Enhanced Product Response Example",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/api/products/1efbdad3-b582-495e-8484-5f89ea6dffbb",
                  "host": ["{{base_url}}"],
                  "path": ["api", "products", "1efbdad3-b582-495e-8484-5f89ea6dffbb"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"id\": \"1efbdad3-b582-495e-8484-5f89ea6dffbb\",\n  \"name\": \"Dusch-WC Geberit AquaClean Alba\",\n  \"slug\": \"dusch-wc-geberit-aquaclean-alba-weiss\",\n  \"price\": 1050.0,\n  \"features_list\": {\n    \"BESCHREIBUNG\": {\n      \"content_items\": [\n        {\n          \"type\": \"rich_text\",\n          \"html\": \"<p>Das Dusch-WC AquaClean Alba verbindet zeitloses Design mit bewährter Schweizer Qualität.</p>\",\n          \"text\": \"Das Dusch-WC AquaClean Alba verbindet zeitloses Design mit bewährter Schweizer Qualität.\"\n        }\n      ],\n      \"pdf_references\": [],\n      \"metadata\": {\n        \"extraction_date\": \"2025-08-05T13:25:00Z\",\n        \"total_items\": 8,\n        \"has_pdfs\": false\n      }\n    },\n    \"TECHNISCHE_DATEN\": {\n      \"content_items\": [\n        {\n          \"type\": \"rich_text\",\n          \"html\": \"<p>Spülvolumen: 4.5 Liter</p><p>Druckbereich: 1-5 bar</p>\",\n          \"text\": \"Spülvolumen: 4.5 Liter, Druckbereich: 1-5 bar\"\n        }\n      ],\n      \"pdf_references\": [\n        {\n          \"type\": \"pdf\",\n          \"title\": \"Produktdatenblatt\",\n          \"filename\": \"dusch-wc-geberit-aquaclean-alba-weiss_technische_daten_PRO_3205931-1.pdf\",\n          \"original_url\": \"https://swiss-vfg.ch/files/PRO_3205931-1.pdf\",\n          \"file_size\": \"109.5 KB\",\n          \"supabase_url\": \"https://ccwpzfbdkxgcnmalphap.supabase.co/storage/v1/object/public/pdfs/dusch-wc-geberit-aquaclean-alba-weiss_technische_daten_PRO_3205931-1.pdf\",\n          \"storage_type\": \"both\",\n          \"upload_status\": \"uploaded\"\n        }\n      ],\n      \"metadata\": {\n        \"extraction_date\": \"2025-08-05T13:25:00Z\",\n        \"total_items\": 6,\n        \"has_pdfs\": true\n      }\n    }\n  },\n  \"content_summary\": {\n    \"total_tabs\": 7,\n    \"total_content_items\": 93,\n    \"total_pdfs\": 1,\n    \"last_extraction_date\": \"2025-08-05T13:25:00Z\"\n  },\n  \"pdfs\": [\n    {\n      \"id\": \"ef16cf10-032d-4235-b61b-03571de3b657\",\n      \"product_id\": \"1efbdad3-b582-495e-8484-5f89ea6dffbb\",\n      \"filename\": \"dusch-wc-geberit-aquaclean-alba-weiss_technische_daten_PRO_3205931-1.pdf\",\n      \"tab_section\": \"TECHNISCHE DATEN\",\n      \"supabase_url\": \"https://ccwpzfbdkxgcnmalphap.supabase.co/storage/v1/object/public/pdfs/dusch-wc-geberit-aquaclean-alba-weiss_technische_daten_PRO_3205931-1.pdf\",\n      \"file_size\": 112247,\n      \"upload_status\": \"uploaded\",\n      \"storage_type\": \"both\"\n    }\n  ],\n  \"brand\": {\n    \"id\": \"brand-geberit\",\n    \"name\": \"Geberit\",\n    \"slug\": \"geberit\"\n  },\n  \"category\": {\n    \"id\": \"category-bathroom\",\n    \"name\": \"Badezimmer\",\n    \"slug\": \"badezimmer\"\n  }\n}"
            }
          ]
        },
        {
          "name": "Get Product with Specific Variant",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/products/{{product_id}}?variant={{variant_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "products", "{{product_id}}"],
              "query": [
                {
                  "key": "variant",
                  "value": "{{variant_id}}",
                  "description": "Specific variant ID to select"
                }
              ]
            },
            "description": "Get product with a specific variant selected. Returns selected_variant with variant-specific pricing/stock, all available_variants for selection, variant_attributes for UI controls, enhanced content (features_list), and PDF attachments. Only works for products with has_variants=true."
          },
          "response": [
            {
              "name": "Product with Real Variant Response",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/api/products/{{product_id}}?variant={{variant_id}}",
                  "host": ["{{base_url}}"],
                  "path": ["api", "products", "{{product_id}}"],
                  "query": [
                    {
                      "key": "variant",
                      "value": "{{variant_id}}"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"id\": \"product-id\",\n  \"name\": \"Product with Variants\",\n  \"price\": 100.00,\n  \"has_variants\": true,\n  \"selected_variant\": {\n    \"id\": \"variant-id-123\",\n    \"sku\": \"PROD-RED-L\",\n    \"price\": 120.00,\n    \"compare_at_price\": 150.00,\n    \"stock_quantity\": 25,\n    \"is_default\": false,\n    \"is_synthetic\": false,\n    \"attributes\": [\n      {\n        \"name\": \"Color\",\n        \"value\": \"Red\"\n      },\n      {\n        \"name\": \"Size\",\n        \"value\": \"Large\"\n      }\n    ]\n  },\n  \"available_variants\": [\n    {\n      \"id\": \"variant-id-123\",\n      \"sku\": \"PROD-RED-L\",\n      \"price\": 120.00,\n      \"attributes\": [{\"name\": \"Color\", \"value\": \"Red\"}, {\"name\": \"Size\", \"value\": \"Large\"}]\n    },\n    {\n      \"id\": \"variant-id-124\",\n      \"sku\": \"PROD-BLUE-M\",\n      \"price\": 110.00,\n      \"attributes\": [{\"name\": \"Color\", \"value\": \"Blue\"}, {\"name\": \"Size\", \"value\": \"Medium\"}]\n    }\n  ],\n  \"variant_attributes\": [\n    {\n      \"name\": \"Color\",\n      \"values\": [\"Red\", \"Blue\", \"Green\"]\n    },\n    {\n      \"name\": \"Size\",\n      \"values\": [\"Small\", \"Medium\", \"Large\"]\n    }\n  ]\n}"
            }
          ]
        },
        {
          "name": "Update Product",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Bosch Professional GSB 18V-55 Akülü Darbeli Matkap (Yenilenmiş)\",\n  \"price\": 999.99,\n  \"stock\": 30,\n  \"stock_code\": \"BSH-GSB18V55-R\",\n  \"description\": \"Yenilenmiş model. 18V Li-ion akülü darbeli matkap. Metal ve ahşap delme işlemleri için ideal. Gelişmiş torque ayarları.\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/products/{{product_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "products", "{{product_id}}"]
            },
            "description": "Update an existing product"
          }
        },
        {
          "name": "Update Product Stock",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"stock\": 50\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/products/{{product_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "products", "{{product_id}}"]
            },
            "description": "Update only product stock"
          }
        },
        {
          "name": "Delete Product",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/products/{{product_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "products", "{{product_id}}"]
            },
            "description": "Delete a product"
          }
        }
      ],
      "description": "Product management endpoints with intelligent variant support and Enhanced Content System. Products always return variant structure:\n\n• **No Variants (has_variants=false)**: Returns synthetic selected_variant with product's pricing/stock, empty available_variants array, and empty variant_attributes\n• **With Variants (has_variants=true)**: Returns actual selected_variant (default or specified via ?variant=ID), all available_variants for selection, and variant_attributes for UI controls\n\nProducts include features_list (JSONB) with structured content from Swiss VFG tabs (BESCHREIBUNG, TECHNISCHE DATEN, ZUBEHÖR, etc.) and PDF attachments."
    },
    {
      "name": "Product Variants",
      "item": [
        {
          "name": "Get Product Variants",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/products/{{product_id}}/variants",
              "host": ["{{base_url}}"],
              "path": ["api", "products", "{{product_id}}", "variants"]
            },
            "description": "Get all variants for a product with their attributes"
          }
        },
        {
          "name": "Create Product Variant",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"sku\": \"BSH-GSB18V55-RED-L\",\n  \"title\": \"Red Large\",\n  \"price\": 899.99,\n  \"compare_at_price\": 999.99,\n  \"stock_quantity\": 15,\n  \"track_inventory\": true,\n  \"continue_selling_when_out_of_stock\": false,\n  \"is_active\": true,\n  \"position\": 0,\n  \"attribute_values\": [\n    \"{{color_red_value_id}}\",\n    \"{{size_large_value_id}}\"\n  ]\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/products/{{product_id}}/variants",
              "host": ["{{base_url}}"],
              "path": ["api", "products", "{{product_id}}", "variants"]
            },
            "description": "Create a new variant for a product with attribute values"
          }
        }
      ],
      "description": "Product variant management endpoints. Variants represent different combinations of product attributes (color, size, material, etc.) with their own pricing and inventory."
    },
    {
      "name": "Product Images",
      "item": [
        {
          "name": "Get Product Images",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/products/{{product_id}}/images",
              "host": ["{{base_url}}"],
              "path": ["api", "products", "{{product_id}}", "images"]
            },
            "description": "Get all images for a product, ordered by order_index"
          }
        },
        {
          "name": "Bulk Upload Product Images",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file_0",
                  "type": "file",
                  "src": "",
                  "description": "First image file"
                },
                {
                  "key": "order_0",
                  "value": "0",
                  "type": "text",
                  "description": "Order index for first image"
                },
                {
                  "key": "is_cover_0",
                  "value": "true",
                  "type": "text",
                  "description": "Set as cover image"
                },
                {
                  "key": "file_1",
                  "type": "file",
                  "src": "",
                  "description": "Second image file",
                  "disabled": true
                },
                {
                  "key": "order_1",
                  "value": "1",
                  "type": "text",
                  "description": "Order index for second image",
                  "disabled": true
                },
                {
                  "key": "is_cover_1",
                  "value": "false",
                  "type": "text",
                  "description": "Not cover image",
                  "disabled": true
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/api/products/{{product_id}}/images/bulk",
              "host": ["{{base_url}}"],
              "path": ["api", "products", "{{product_id}}", "images", "bulk"]
            },
            "description": "Upload multiple images for a product in bulk. Only one image can be set as cover."
          }
        },
        {
          "name": "Upload Single Product Image",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "type": "file",
                  "src": "",
                  "description": "Image file to upload"
                },
                {
                  "key": "order_index",
                  "value": "0",
                  "type": "text",
                  "description": "Order index for the image (optional, default: 0)"
                },
                {
                  "key": "is_cover",
                  "value": "false",
                  "type": "text",
                  "description": "Set as cover image (true/false, default: false)"
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/api/products/{{product_id}}/images",
              "host": ["{{base_url}}"],
              "path": ["api", "products", "{{product_id}}", "images"]
            },
            "description": "Upload a single image for a product. If is_cover is true, existing cover will be removed."
          }
        },
        {
          "name": "Reorder Product Images",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"imageOrders\": [\n    {\n      \"id\": \"{{image_id_1}}\",\n      \"order_index\": 0\n    },\n    {\n      \"id\": \"{{image_id_2}}\",\n      \"order_index\": 1\n    },\n    {\n      \"id\": \"{{image_id_3}}\",\n      \"order_index\": 2\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/products/{{product_id}}/images/reorder",
              "host": ["{{base_url}}"],
              "path": ["api", "products", "{{product_id}}", "images", "reorder"]
            },
            "description": "Update the order of product images"
          }
        },
        {
          "name": "Set Cover Image",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/products/{{product_id}}/images/{{image_id}}/cover",
              "host": ["{{base_url}}"],
              "path": [
                "api",
                "products",
                "{{product_id}}",
                "images",
                "{{image_id}}",
                "cover"
              ]
            },
            "description": "Set a specific image as the cover image for the product"
          }
        },
        {
          "name": "Delete Single Image",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/products/{{product_id}}/images/{{image_id}}",
              "host": ["{{base_url}}"],
              "path": [
                "api",
                "products",
                "{{product_id}}",
                "images",
                "{{image_id}}"
              ]
            },
            "description": "Delete a single product image. If it's the cover image, another image will be automatically set as cover."
          }
        },
        {
          "name": "Delete All Product Images",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/products/{{product_id}}/images",
              "host": ["{{base_url}}"],
              "path": ["api", "products", "{{product_id}}", "images"]
            },
            "description": "Delete all images for a product"
          }
        }
      ],
      "description": "Product image management endpoints with cover and ordering support"
    },
    {
      "name": "Banners",
      "item": [
        {
          "name": "Get All Banners",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/banners?page=1&limit=10",
              "host": ["{{base_url}}"],
              "path": ["api", "banners"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "key": "is_active",
                  "value": "",
                  "disabled": true,
                  "description": "Filter by active status (true/false)"
                }
              ]
            },
            "description": "Get all banners ordered by order_index"
          }
        },
        {
          "name": "Get Active Banners",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/banners?is_active=true",
              "host": ["{{base_url}}"],
              "path": ["api", "banners"],
              "query": [
                {
                  "key": "is_active",
                  "value": "true"
                }
              ]
            },
            "description": "Get only active banners"
          }
        },
        {
          "name": "Create Banner",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Yaz İndirimleri\",\n  \"image_url\": \"https://example.com/images/summer-sale-banner.jpg\",\n  \"link\": \"https://example.com/summer-sale\",\n  \"order_index\": 1,\n  \"is_active\": true\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/banners",
              "host": ["{{base_url}}"],
              "path": ["api", "banners"]
            },
            "description": "Create a new banner with image URL (JSON method)"
          }
        },
        {
          "name": "Create Banner (Auto Order)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Yeni Ürünler\",\n  \"image_url\": \"https://example.com/images/new-products-banner.jpg\",\n  \"link\": \"https://example.com/new-products\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/banners",
              "host": ["{{base_url}}"],
              "path": ["api", "banners"]
            },
            "description": "Create banner with auto order_index and default active status (JSON method)"
          }
        },
        {
          "name": "Create Banner (No Image)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Özel Kampanya\",\n  \"link\": \"https://example.com/special-campaign\",\n  \"order_index\": 2\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/banners",
              "host": ["{{base_url}}"],
              "path": ["api", "banners"]
            },
            "description": "Create banner without image (image can be added later via upload endpoint)"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.environment.set('banner_id', response.id);",
                  "    console.log('Banner created with ID:', response.id);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Banner by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/banners/{{banner_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "banners", "{{banner_id}}"]
            },
            "description": "Get a specific banner by ID"
          }
        },
        {
          "name": "Update Banner",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Mega Yaz İndirimleri\",\n  \"is_active\": true,\n  \"order_index\": 0\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/banners/{{banner_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "banners", "{{banner_id}}"]
            },
            "description": "Update an existing banner"
          }
        },
        {
          "name": "Deactivate Banner",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"is_active\": false\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/banners/{{banner_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "banners", "{{banner_id}}"]
            },
            "description": "Deactivate a banner"
          }
        },
        {
          "name": "Delete Banner",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/banners/{{banner_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "banners", "{{banner_id}}"]
            },
            "description": "Delete a banner"
          }
        },
        {
          "name": "Create Banner with File Upload",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "title",
                  "value": "Kış İndirimleri",
                  "type": "text",
                  "description": "Banner title"
                },
                {
                  "key": "link",
                  "value": "https://example.com/winter-sale",
                  "type": "text",
                  "description": "Banner link URL"
                },
                {
                  "key": "order_index",
                  "value": "0",
                  "type": "text",
                  "description": "Banner order (optional)"
                },
                {
                  "key": "is_active",
                  "value": "true",
                  "type": "text",
                  "description": "Is banner active"
                },
                {
                  "key": "file",
                  "type": "file",
                  "src": "",
                  "description": "Banner image file (required)"
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/api/banners/upload",
              "host": ["{{base_url}}"],
              "path": ["api", "banners", "upload"]
            },
            "description": "Create a new banner with image upload (dedicated endpoint for multipart/form-data)"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.environment.set('banner_id', response.id);",
                  "    console.log('Banner created with ID:', response.id);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Upload Banner Image",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "type": "file",
                  "src": "",
                  "description": "Banner image file to upload"
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/api/banners/{{banner_id}}/images",
              "host": ["{{base_url}}"],
              "path": ["api", "banners", "{{banner_id}}", "images"]
            },
            "description": "Upload or replace image for an existing banner"
          }
        },
        {
          "name": "Delete Banner Image",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/banners/{{banner_id}}/images",
              "host": ["{{base_url}}"],
              "path": ["api", "banners", "{{banner_id}}", "images"]
            },
            "description": "Delete the image from a banner (sets image_url to null)"
          }
        }
      ],
      "description": "Banner management endpoints. Use /api/banners for JSON requests (with image URLs) and /api/banners/upload for file uploads."
    },
    {
      "name": "File Upload",
      "item": [
        {
          "name": "Upload Image",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "type": "file",
                  "src": "",
                  "description": "Image file to upload"
                },
                {
                  "key": "folder",
                  "value": "products",
                  "type": "text",
                  "description": "Upload folder (products, banners, etc.)"
                },
                {
                  "key": "bucket",
                  "value": "images",
                  "type": "text",
                  "description": "Storage bucket name"
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/api/upload",
              "host": ["{{base_url}}"],
              "path": ["api", "upload"]
            },
            "description": "Upload an image file to storage"
          }
        },
        {
          "name": "Upload Banner Image",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "type": "file",
                  "src": "",
                  "description": "Banner image file to upload"
                },
                {
                  "key": "folder",
                  "value": "banners",
                  "type": "text"
                },
                {
                  "key": "bucket",
                  "value": "images",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/api/upload",
              "host": ["{{base_url}}"],
              "path": ["api", "upload"]
            },
            "description": "Upload a banner image"
          }
        },
        {
          "name": "Delete Image",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/upload?url=https://example.com/images/file.jpg&bucket=images",
              "host": ["{{base_url}}"],
              "path": ["api", "upload"],
              "query": [
                {
                  "key": "url",
                  "value": "https://example.com/images/file.jpg",
                  "description": "Image URL to delete"
                },
                {
                  "key": "bucket",
                  "value": "images"
                }
              ]
            },
            "description": "Delete an image from storage"
          }
        }
      ],
      "description": "File upload and management endpoints"
    },
    {
      "name": "Cart",
      "item": [
        {
          "name": "Get Cart",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/cart/{{session_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "cart", "{{session_id}}"]
            },
            "description": "Get cart by session ID"
          },
          "response": []
        },
        {
          "name": "Create Cart",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/cart/{{session_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "cart", "{{session_id}}"]
            },
            "description": "Create or get existing cart for session"
          },
          "response": []
        },
        {
          "name": "Clear Cart",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/cart/{{session_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "cart", "{{session_id}}"]
            },
            "description": "Clear all items from cart"
          },
          "response": []
        },
        {
          "name": "Get Cart Items",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/cart/{{session_id}}/items",
              "host": ["{{base_url}}"],
              "path": ["api", "cart", "{{session_id}}", "items"]
            },
            "description": "Get all items in cart"
          },
          "response": []
        },
        {
          "name": "Add Item to Cart",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201 || pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.id) {",
                  "        pm.environment.set('cart_item_id', response.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"product_id\": \"{{product_id}}\",\n  \"quantity\": 2\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/cart/{{session_id}}/items",
              "host": ["{{base_url}}"],
              "path": ["api", "cart", "{{session_id}}", "items"]
            },
            "description": "Add product to cart or update quantity if already exists. Uses synthetic variant for products without variants (has_variants=false). For products with variants (has_variants=true), you can optionally specify variant_id to add a specific variant, otherwise uses the default variant."
          }
        },
        {
          "name": "Add Product Variant to Cart",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201 || pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.id) {",
                  "        pm.environment.set('cart_item_id', response.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"product_id\": \"{{product_id}}\",\n  \"variant_id\": \"{{variant_id}}\",\n  \"quantity\": 1\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/cart/{{session_id}}/items",
              "host": ["{{base_url}}"],
              "path": ["api", "cart", "{{session_id}}", "items"]
            },
            "description": "Add specific product variant to cart with explicit variant_id. Only works for products with has_variants=true. Uses variant-specific pricing, stock, and attributes. If variant_id is invalid or doesn't belong to the product, returns an error."
          },
          "response": []
        },
        {
          "name": "Get Cart Item",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/cart/{{session_id}}/items/{{cart_item_id}}",
              "host": ["{{base_url}}"],
              "path": [
                "api",
                "cart",
                "{{session_id}}",
                "items",
                "{{cart_item_id}}"
              ]
            },
            "description": "Get specific cart item details"
          },
          "response": []
        },
        {
          "name": "Update Cart Item Quantity",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"quantity\": 5\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/cart/{{session_id}}/items/{{cart_item_id}}",
              "host": ["{{base_url}}"],
              "path": [
                "api",
                "cart",
                "{{session_id}}",
                "items",
                "{{cart_item_id}}"
              ]
            },
            "description": "Update quantity of cart item"
          },
          "response": []
        },
        {
          "name": "Remove Item from Cart",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/cart/{{session_id}}/items/{{cart_item_id}}",
              "host": ["{{base_url}}"],
              "path": [
                "api",
                "cart",
                "{{session_id}}",
                "items",
                "{{cart_item_id}}"
              ]
            },
            "description": "Remove specific item from cart"
          },
          "response": []
        }
      ],
      "description": "Shopping cart management endpoints with intelligent variant support. Cart items automatically handle both products with variants (real variant IDs) and products without variants (synthetic variant system). All cart operations work consistently regardless of product variant configuration."
    },
    {
      "name": "Orders",
      "item": [
        {
          "name": "Get All Orders",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/orders?page=1&limit=10",
              "host": ["{{base_url}}"],
              "path": ["api", "orders"],
              "query": [
                {
                  "key": "page",
                  "value": "1",
                  "description": "Page number"
                },
                {
                  "key": "limit",
                  "value": "10",
                  "description": "Items per page"
                },
                {
                  "key": "status",
                  "value": "",
                  "description": "Filter by order status",
                  "disabled": true
                },
                {
                  "key": "search",
                  "value": "",
                  "description": "Search by customer name, email, or phone",
                  "disabled": true
                },
                {
                  "key": "order_number",
                  "value": "",
                  "description": "Search by order number",
                  "disabled": true
                }
              ]
            },
            "description": "Get all orders with pagination and filters"
          },
          "response": []
        },
        {
          "name": "Search Orders by Status",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/orders?status=pending&page=1&limit=10",
              "host": ["{{base_url}}"],
              "path": ["api", "orders"],
              "query": [
                {
                  "key": "status",
                  "value": "pending"
                },
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            },
            "description": "Filter orders by status (pending, confirmed, processing, shipped, delivered, cancelled)"
          },
          "response": []
        },
        {
          "name": "Search Orders by Customer",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/orders?search=john&page=1&limit=10",
              "host": ["{{base_url}}"],
              "path": ["api", "orders"],
              "query": [
                {
                  "key": "search",
                  "value": "john"
                },
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            },
            "description": "Search orders by customer name, email, or phone"
          },
          "response": []
        },
        {
          "name": "Create Order from Cart",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    if (response.id) {",
                  "        pm.environment.set('order_id', response.id);",
                  "    }",
                  "    if (response.order_number) {",
                  "        pm.environment.set('order_number', response.order_number);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"session_id\": \"{{session_id}}\",\n  \"customer_name\": \"John Doe\",\n  \"customer_email\": \"john.doe@example.com\",\n  \"customer_phone\": \"5551234567\",\n  \"shipping_province\": \"İstanbul\",\n  \"shipping_district\": \"Kadıköy\",\n  \"shipping_postal_code\": \"34710\",\n  \"shipping_address\": \"Moda Caddesi No:123 Daire:4 Kadıköy/İstanbul\",\n  \"billing_province\": \"İstanbul\",\n  \"billing_district\": \"Kadıköy\",\n  \"billing_postal_code\": \"34710\",\n  \"billing_address\": \"Moda Caddesi No:123 Daire:4 Kadıköy/İstanbul\",\n  \"notes\": \"Kapı zilini çalmayın, köpek var. Telefon açılmazsa kapıcıya bırakabilirsiniz.\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/orders",
              "host": ["{{base_url}}"],
              "path": ["api", "orders"]
            },
            "description": "Create order from cart items with customer information"
          },
          "response": []
        },
        {
          "name": "Create Order (Minimal)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"session_id\": \"{{session_id}}\",\n  \"customer_name\": \"Jane Smith\",\n  \"customer_email\": \"jane.smith@example.com\",\n  \"customer_phone\": \"5559876543\",\n  \"shipping_province\": \"Ankara\",\n  \"shipping_district\": \"Çankaya\",\n  \"shipping_postal_code\": \"06100\",\n  \"shipping_address\": \"Atatürk Bulvarı No:456 Çankaya/Ankara\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/orders",
              "host": ["{{base_url}}"],
              "path": ["api", "orders"]
            },
            "description": "Create order with minimal required information (no billing address)"
          },
          "response": []
        },
        {
          "name": "Get Order by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/orders/{{order_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "orders", "{{order_id}}"]
            },
            "description": "Get order details by ID"
          },
          "response": []
        },
        {
          "name": "Update Order Status",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"status\": \"confirmed\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/orders/{{order_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "orders", "{{order_id}}"]
            },
            "description": "Update order status (pending, confirmed, processing, shipped, delivered, cancelled)"
          },
          "response": []
        },
        {
          "name": "Update Order Details",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"status\": \"processing\",\n  \"customer_name\": \"John Doe Jr.\",\n  \"customer_phone\": \"5551111111\",\n  \"notes\": \"Acil sipariş - hızlı gönderim talep ediliyor\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/orders/{{order_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "orders", "{{order_id}}"]
            },
            "description": "Update multiple order fields"
          },
          "response": []
        },
        {
          "name": "Delete Order",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/orders/{{order_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "orders", "{{order_id}}"]
            },
            "description": "Delete order (only pending or cancelled orders can be deleted)"
          },
          "response": []
        },
        {
          "name": "Update Tracking URL",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"order_number\": \"{{order_number}}\",\n  \"tracking_url\": \"https://tracking.example.com/track/ABC123XYZ\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/orders/tracking",
              "host": ["{{base_url}}"],
              "path": ["api", "orders", "tracking"]
            },
            "description": "Update tracking URL for an order by order number and automatically set status to 'delivered'. Public endpoint - no authentication required."
          },
          "response": []
        },
        {
          "name": "Get Tracking URL",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/orders/tracking?order_number={{order_number}}",
              "host": ["{{base_url}}"],
              "path": ["api", "orders", "tracking"],
              "query": [
                {
                  "key": "order_number",
                  "value": "{{order_number}}",
                  "description": "Order number to get tracking URL for"
                }
              ]
            },
            "description": "Get tracking URL for an order by order number. Public endpoint - no authentication required."
          },
          "response": []
        }
      ],
      "description": "Order management endpoints"
    },
    {
      "name": "Example Workflow",
      "item": [
        {
          "name": "1. Create Brand (Bosch)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Bosch\",\n  \"slug\": \"bosch\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/brands",
              "host": ["{{base_url}}"],
              "path": ["api", "brands"]
            },
            "description": "Step 1: Create Bosch brand"
          }
        },
        {
          "name": "2. Create Category (Power Tools)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Güç Aletleri\",\n  \"slug\": \"guc-aletleri\",\n  \"emoji\": \"🔧\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/categories",
              "host": ["{{base_url}}"],
              "path": ["api", "categories"]
            },
            "description": "Step 2: Create Power Tools category"
          }
        },
        {
          "name": "3. Create Subcategory (Drills)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Matkap\",\n  \"slug\": \"matkap\",\n  \"emoji\": \"🔨\",\n  \"parent_id\": \"REPLACE_WITH_CATEGORY_ID_FROM_STEP_2\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/categories",
              "host": ["{{base_url}}"],
              "path": ["api", "categories"]
            },
            "description": "Step 3: Create Drills subcategory"
          }
        },
        {
          "name": "4. Create Product",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Bosch Professional GSB 18V-55 Akülü Darbeli Matkap\",\n  \"slug\": \"bosch-professional-gsb-18v-55-akulu-darbeli-matkap\",\n  \"description\": \"18V Li-ion akülü darbeli matkap. Metal ve ahşap delme işlemleri için ideal. 13mm mandren kapasitesi.\",\n  \"price\": 899.99,\n  \"stock\": 25,\n  \"brand_id\": \"REPLACE_WITH_BRAND_ID_FROM_STEP_1\",\n  \"category_id\": \"REPLACE_WITH_SUBCATEGORY_ID_FROM_STEP_3\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/products",
              "host": ["{{base_url}}"],
              "path": ["api", "products"]
            },
            "description": "Step 4: Create product with brand and category"
          }
        },
        {
          "name": "5. Create Banner",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Bosch Professional Serisi İndirimi\",\n  \"image_url\": \"https://via.placeholder.com/1200x400/007bff/ffffff?text=Bosch+Professional+İndirim\",\n  \"link\": \"/brands/bosch\",\n  \"order_index\": 0,\n  \"is_active\": true\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/banners",
              "host": ["{{base_url}}"],
              "path": ["api", "banners"]
            },
            "description": "Step 5: Create promotional banner"
          }
        }
      ],
      "description": "Complete workflow example from brand creation to product listing"
    },
    {
      "name": "Cart & Order Workflow",
      "item": [
        {
          "name": "1. Create/Get Cart",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201 || pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.cart_id) {",
                  "        pm.environment.set('cart_id', response.cart_id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/cart/{{session_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "cart", "{{session_id}}"]
            },
            "description": "Step 1: Create or get existing cart for the session"
          }
        },
        {
          "name": "2. Add Product to Cart",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201 || pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.id) {",
                  "        pm.environment.set('cart_item_id', response.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"product_id\": \"{{product_id}}\",\n  \"quantity\": 2\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/cart/{{session_id}}/items",
              "host": ["{{base_url}}"],
              "path": ["api", "cart", "{{session_id}}", "items"]
            },
            "description": "Step 2: Add product to cart (requires product_id from previous workflow)"
          }
        },
        {
          "name": "3. Add Another Product",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"product_id\": \"{{product_id}}\",\n  \"quantity\": 1\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/cart/{{session_id}}/items",
              "host": ["{{base_url}}"],
              "path": ["api", "cart", "{{session_id}}", "items"]
            },
            "description": "Step 3: Add same product again (will increase quantity)"
          }
        },
        {
          "name": "4. Update Cart Item Quantity",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"quantity\": 5\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/cart/{{session_id}}/items/{{cart_item_id}}",
              "host": ["{{base_url}}"],
              "path": [
                "api",
                "cart",
                "{{session_id}}",
                "items",
                "{{cart_item_id}}"
              ]
            },
            "description": "Step 4: Update item quantity in cart"
          }
        },
        {
          "name": "5. View Cart",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/cart/{{session_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "cart", "{{session_id}}"]
            },
            "description": "Step 5: View complete cart with totals"
          }
        },
        {
          "name": "6. Create Order from Cart",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    if (response.id) {",
                  "        pm.environment.set('order_id', response.id);",
                  "    }",
                  "    if (response.order_number) {",
                  "        pm.environment.set('order_number', response.order_number);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"session_id\": \"{{session_id}}\",\n  \"customer_name\": \"Workflow Test User\",\n  \"customer_email\": \"workflow@example.com\",\n  \"customer_phone\": \"5551234567\",\n  \"shipping_province\": \"İstanbul\",\n  \"shipping_district\": \"Kadıköy\",\n  \"shipping_postal_code\": \"34710\",\n  \"shipping_address\": \"Workflow Test Address, Kadıköy/İstanbul\",\n  \"notes\": \"This is a test order from Postman workflow\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/orders",
              "host": ["{{base_url}}"],
              "path": ["api", "orders"]
            },
            "description": "Step 6: Create order from cart (cart will be cleared after successful order)"
          }
        },
        {
          "name": "7. View Created Order",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/orders/{{order_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "orders", "{{order_id}}"]
            },
            "description": "Step 7: View the created order details"
          }
        },
        {
          "name": "8. Update Order Status",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"status\": \"confirmed\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/orders/{{order_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "orders", "{{order_id}}"]
            },
            "description": "Step 8: Update order status to confirmed"
          }
        }
      ],
      "description": "Complete cart and order workflow from adding items to cart to order creation and management"
    },
    {
      "name": "Product Variant Workflow",
      "item": [
        {
          "name": "1. Get Product (No Variants)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/products/{{product_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "products", "{{product_id}}"]
            },
            "description": "Get product without variants - shows synthetic variant structure"
          }
        },
        {
          "name": "2. Create Variant for Product",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"sku\": \"PROD-RED-L-001\",\n  \"title\": \"Red Large\",\n  \"price\": 120.00,\n  \"compare_at_price\": 150.00,\n  \"stock_quantity\": 15,\n  \"track_inventory\": true,\n  \"continue_selling_when_out_of_stock\": false,\n  \"is_active\": true,\n  \"position\": 0,\n  \"attribute_values\": []\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/products/{{product_id}}/variants",
              "host": ["{{base_url}}"],
              "path": ["api", "products", "{{product_id}}", "variants"]
            },
            "description": "Create a variant for the product - this will change has_variants to true"
          }
        },
        {
          "name": "3. Get Product (With Variants)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/products/{{product_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "products", "{{product_id}}"]
            },
            "description": "Get same product now with variants - shows real variant structure with default variant selected"
          }
        },
        {
          "name": "4. Get Product with Specific Variant",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/products/{{product_id}}?variant={{variant_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "products", "{{product_id}}"],
              "query": [
                {
                  "key": "variant",
                  "value": "{{variant_id}}"
                }
              ]
            },
            "description": "Get product with specific variant selected - shows variant-specific pricing and attributes"
          }
        },
        {
          "name": "5. Add Variant to Cart",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"product_id\": \"{{product_id}}\",\n  \"variant_id\": \"{{variant_id}}\",\n  \"quantity\": 2\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/cart/{{session_id}}/items",
              "host": ["{{base_url}}"],
              "path": ["api", "cart", "{{session_id}}", "items"]
            },
            "description": "Add specific variant to cart - uses variant pricing and stock"
          }
        }
      ],
      "description": "Demonstrates how the variant system works: products start without variants (synthetic), can have variants added (real), and cart/order operations handle both seamlessly"
    },
    {
      "name": "Enhanced Content System",
      "item": [
        {
          "name": "Get Product with Features List",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/products/{{enhanced_product_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "products", "{{enhanced_product_id}}"]
            },
            "description": "Get product with enhanced content system including features_list (structured tabs), content_summary, and PDF attachments from Swiss VFG scraper"
          }
        },
        {
          "name": "Search Content in Features List",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/products?search=Chrom&page=1&limit=10",
              "host": ["{{base_url}}"],
              "path": ["api", "products"],
              "query": [
                {
                  "key": "search",
                  "value": "Chrom",
                  "description": "Search within features_list content and product names"
                },
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            },
            "description": "Search products by content within features_list tabs (BESCHREIBUNG, TECHNISCHE DATEN, etc.)"
          }
        },
        {
          "name": "Get Products with PDFs",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/products?has_pdfs=true&page=1&limit=10",
              "host": ["{{base_url}}"],
              "path": ["api", "products"],
              "query": [
                {
                  "key": "has_pdfs",
                  "value": "true",
                  "description": "Filter products that have PDF attachments"
                },
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            },
            "description": "Get products that have PDF attachments (technical specifications, manuals, etc.)"
          }
        }
      ],
      "description": "Enhanced Content System endpoints for Swiss VFG scraped products with structured content tabs and PDF management"
    },
    {
      "name": "Waitlist Management",
      "item": [
        {
          "name": "Get Waitlist Entries",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/waitlist?page=1&limit=10&type=all&requires_review=false",
              "host": ["{{base_url}}"],
              "path": ["api", "waitlist"],
              "query": [
                {
                  "key": "page",
                  "value": "1",
                  "description": "Page number for pagination"
                },
                {
                  "key": "limit", 
                  "value": "10",
                  "description": "Number of items per page"
                },
                {
                  "key": "type",
                  "value": "all",
                  "description": "Filter by type: new, update, or all"
                },
                {
                  "key": "requires_review",
                  "value": "false",
                  "description": "Filter entries requiring manual review",
                  "disabled": true
                },
                {
                  "key": "has_invalid_discount",
                  "value": "false", 
                  "description": "Filter entries with invalid discounts",
                  "disabled": true
                },
                {
                  "key": "reason",
                  "value": "",
                  "description": "Filter by waitlist reason",
                  "disabled": true
                }
              ]
            },
            "description": "Get paginated list of waitlist entries with optional filtering by type, review status, and reason. Each entry contains the complete payload_json that will be used for product creation/update upon approval. Admin access required."
          },
          "response": [
            {
              "name": "Paginated Waitlist Entries",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/api/waitlist?page=1&limit=2&type=all",
                  "host": ["{{base_url}}"],
                  "path": ["api", "waitlist"],
                  "query": [
                    {
                      "key": "page",
                      "value": "1"
                    },
                    {
                      "key": "limit",
                      "value": "2"
                    },
                    {
                      "key": "type",
                      "value": "all"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"f8e9a123-4567-89ab-cdef-123456789abc\",\n      \"product_slug\": \"wc-sitz-snapex-ohne-softclose\",\n      \"product_id\": null,\n      \"type\": \"new\",\n      \"payload_json\": {\n        \"name\": \"WC-Sitz Snapex, ohne Absenkautomatik\",\n        \"slug\": \"wc-sitz-snapex-ohne-softclose\",\n        \"description\": \"zzgl. MwSt.\",\n        \"price\": 55.0,\n        \"stock\": 100,\n        \"image_url\": \"https://swiss-vfg.ch/cdn/shop/files/wc-sitz-snapex-ohne-absenkautomatik-635290_1200x.png?v=1742307145\",\n        \"discount_price\": 36.0,\n        \"stock_code\": \"2053\",\n        \"status\": \"waiting_approval\",\n        \"is_changeable\": true,\n        \"images\": [\n          {\n            \"url\": \"https://swiss-vfg.ch/cdn/shop/files/wc-sitz-snapex-ohne-absenkautomatik-635290_1200x.png?v=1742307145\",\n            \"order_index\": 0,\n            \"is_cover\": true\n          }\n        ],\n        \"raw_variant_data\": [\n          {\n            \"source_variant_id\": \"6091710521215760335\",\n            \"sku\": \"6091710521215760335\",\n            \"title\": \"Weiss\",\n            \"price\": 36.0,\n            \"compare_at_price\": 55.0,\n            \"stock_quantity\": 100,\n            \"is_active\": true,\n            \"attributes\": {\n              \"farbe\": \"weiss\"\n            }\n          }\n        ],\n        \"category_slug\": \"wc-sitze-dusch-wc\",\n        \"source_url\": \"https://swiss-vfg.ch/products/wc-sitz-snapex-ohne-softclose\",\n        \"currency\": \"CHF\",\n        \"language\": \"DE\",\n        \"brand_id\": \"5411def0-9284-44d4-a381-2e2538b0e070\"\n      },\n      \"diff_summary\": null,\n      \"created_at\": \"2025-01-15T10:30:00Z\",\n      \"updated_at\": \"2025-01-15T10:30:00Z\",\n      \"created_by\": \"scraper\",\n      \"version\": 1,\n      \"reason\": \"NEW_PRODUCT\",\n      \"is_valid\": true,\n      \"validation_errors\": [],\n      \"requires_manual_review\": false,\n      \"price_drop_percentage\": null,\n      \"has_invalid_discount\": false\n    },\n    {\n      \"id\": \"a1b2c3d4-5678-90ab-cdef-123456789def\",\n      \"product_slug\": \"dusch-wc-aquaclean-mera\",\n      \"product_id\": \"e5f6g7h8-9012-34ab-cdef-567890123456\",\n      \"type\": \"update\",\n      \"payload_json\": {\n        \"name\": \"Dusch-WC AquaClean Mera Classic\",\n        \"slug\": \"dusch-wc-aquaclean-mera\",\n        \"description\": \"Premium Dusch-WC mit Absenkautomatik\",\n        \"price\": 2850.0,\n        \"stock\": 5,\n        \"image_url\": \"https://swiss-vfg.ch/cdn/shop/files/dusch-wc-mera.jpg\",\n        \"discount_price\": 2500.0,\n        \"stock_code\": \"146.110.11.1\",\n        \"status\": \"pending_update\",\n        \"is_changeable\": true,\n        \"brand_id\": \"5411def0-9284-44d4-a381-2e2538b0e070\"\n      },\n      \"diff_summary\": {\n        \"price_changed\": true,\n        \"stock_changed\": true\n      },\n      \"created_at\": \"2025-01-15T14:45:00Z\",\n      \"updated_at\": \"2025-01-15T14:45:00Z\",\n      \"created_by\": \"scraper\",\n      \"version\": 2,\n      \"reason\": \"PRICE_CHANGE\",\n      \"is_valid\": true,\n      \"validation_errors\": [],\n      \"requires_manual_review\": false,\n      \"price_drop_percentage\": 12.28,\n      \"has_invalid_discount\": false\n    }\n  ],\n  \"pagination\": {\n    \"page\": 1,\n    \"limit\": 2,\n    \"total\": 15,\n    \"totalPages\": 8\n  }\n}"
            }
          ]
        },
        {
          "name": "Get Waitlist Stats",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/waitlist/stats",
              "host": ["{{base_url}}"],
              "path": ["api", "waitlist", "stats"]
            },
            "description": "Get comprehensive waitlist statistics including queue health, error rates, and recent entries. Admin access required."
          }
        },
        {
          "name": "Get Waitlist Entry Details",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/waitlist/{{waitlist_entry_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "waitlist", "{{waitlist_entry_id}}"]
            },
            "description": "Get detailed information about a specific waitlist entry including diff analysis and complete payload_json structure. Admin access required. The payload_json field contains the complete product data that will be created or updated upon approval."
          },
          "response": [
            {
              "name": "New Product Entry Example",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/api/waitlist/{{waitlist_entry_id}}",
                  "host": ["{{base_url}}"],
                  "path": ["api", "waitlist", "{{waitlist_entry_id}}"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"f8e9a123-4567-89ab-cdef-123456789abc\",\n    \"product_slug\": \"wc-sitz-snapex-ohne-softclose\",\n    \"product_id\": null,\n    \"type\": \"new\",\n    \"payload_json\": {\n      \"name\": \"WC-Sitz Snapex, ohne Absenkautomatik\",\n      \"slug\": \"wc-sitz-snapex-ohne-softclose\",\n      \"description\": \"zzgl. MwSt.\",\n      \"price\": 55.0,\n      \"stock\": 100,\n      \"image_url\": \"https://swiss-vfg.ch/cdn/shop/files/wc-sitz-snapex-ohne-absenkautomatik-635290_1200x.png?v=1742307145\",\n      \"discount_price\": 36.0,\n      \"stock_code\": \"2053\",\n      \"status\": \"waiting_approval\",\n      \"is_changeable\": true,\n      \"images\": [\n        {\n          \"url\": \"https://swiss-vfg.ch/cdn/shop/files/wc-sitz-snapex-ohne-absenkautomatik-635290_1200x.png?v=1742307145\",\n          \"order_index\": 0,\n          \"is_cover\": true\n        },\n        {\n          \"url\": \"https://swiss-vfg.ch/cdn/shop/files/wc-sitz-snapex-ohne-absenkautomatik-924880_1200x.jpg?v=1742307147\",\n          \"order_index\": 1,\n          \"is_cover\": false\n        },\n        {\n          \"url\": \"https://swiss-vfg.ch/cdn/shop/files/wc-sitz-snapex-ohne-absenkautomatik-710225_1200x.jpg?v=1742307146\",\n          \"order_index\": 2,\n          \"is_cover\": false\n        }\n      ],\n      \"raw_variant_data\": [\n        {\n          \"source_variant_id\": \"6091710521215760335\",\n          \"sku\": \"6091710521215760335\",\n          \"title\": \"Weiss\",\n          \"price\": 36.0,\n          \"compare_at_price\": 55.0,\n          \"stock_quantity\": 100,\n          \"is_active\": true,\n          \"attributes\": {\n            \"farbe\": \"weiss\"\n          },\n          \"source_data\": {\n            \"type\": \"generated_from_attributes\"\n          }\n        }\n      ],\n      \"attribute_data\": {\n        \"farbe\": [\"weiss\"]\n      },\n      \"category_slug\": \"wc-sitze-dusch-wc\",\n      \"source_url\": \"https://swiss-vfg.ch/products/wc-sitz-snapex-ohne-softclose\",\n      \"currency\": \"CHF\",\n      \"language\": \"DE\",\n      \"brand_id\": \"5411def0-9284-44d4-a381-2e2538b0e070\"\n    },\n    \"diff_summary\": null,\n    \"current_product\": null,\n    \"calculated_diff\": null,\n    \"validation\": {\n      \"is_valid\": true,\n      \"has_invalid_discount\": false,\n      \"price_drop_percentage\": null,\n      \"requires_manual_review\": false,\n      \"validation_errors\": []\n    },\n    \"metadata\": {\n      \"created_at\": \"2025-01-15T10:30:00Z\",\n      \"updated_at\": \"2025-01-15T10:30:00Z\",\n      \"created_by\": \"scraper\",\n      \"version\": 1,\n      \"reason\": \"NEW_PRODUCT\"\n    }\n  }\n}"
            },
            {
              "name": "Product Update Entry Example",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/api/waitlist/{{waitlist_entry_id}}",
                  "host": ["{{base_url}}"],
                  "path": ["api", "waitlist", "{{waitlist_entry_id}}"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"a1b2c3d4-5678-90ab-cdef-123456789def\",\n    \"product_slug\": \"wc-sitz-snapex-ohne-softclose\",\n    \"product_id\": \"e5f6g7h8-9012-34ab-cdef-567890123456\",\n    \"type\": \"update\",\n    \"payload_json\": {\n      \"name\": \"WC-Sitz Snapex, ohne Absenkautomatik\",\n      \"slug\": \"wc-sitz-snapex-ohne-softclose\",\n      \"description\": \"zzgl. MwSt.\",\n      \"price\": 45.0,\n      \"stock\": 150,\n      \"image_url\": \"https://swiss-vfg.ch/cdn/shop/files/wc-sitz-snapex-ohne-absenkautomatik-635290_1200x.png?v=1742307145\",\n      \"discount_price\": 32.0,\n      \"stock_code\": \"2053\",\n      \"status\": \"pending_update\",\n      \"is_changeable\": true,\n      \"brand_id\": \"5411def0-9284-44d4-a381-2e2538b0e070\"\n    },\n    \"diff_summary\": {\n      \"price_changed\": true,\n      \"stock_changed\": true,\n      \"discount_changed\": true\n    },\n    \"current_product\": {\n      \"id\": \"e5f6g7h8-9012-34ab-cdef-567890123456\",\n      \"name\": \"WC-Sitz Snapex, ohne Absenkautomatik\",\n      \"price\": 55.0,\n      \"discount_price\": 36.0,\n      \"stock\": 100,\n      \"status\": \"active\"\n    },\n    \"calculated_diff\": {\n      \"price\": {\n        \"current\": 55.0,\n        \"proposed\": 45.0,\n        \"type\": \"numeric\",\n        \"percentage_change\": -18.18\n      },\n      \"discount_price\": {\n        \"current\": 36.0,\n        \"proposed\": 32.0,\n        \"type\": \"numeric\",\n        \"percentage_change\": -11.11\n      },\n      \"stock\": {\n        \"current\": 100,\n        \"proposed\": 150,\n        \"type\": \"numeric\",\n        \"percentage_change\": 50.0\n      }\n    },\n    \"validation\": {\n      \"is_valid\": true,\n      \"has_invalid_discount\": false,\n      \"price_drop_percentage\": 18.18,\n      \"requires_manual_review\": false,\n      \"validation_errors\": []\n    },\n    \"metadata\": {\n      \"created_at\": \"2025-01-15T14:45:00Z\",\n      \"updated_at\": \"2025-01-15T14:45:00Z\",\n      \"created_by\": \"scraper\",\n      \"version\": 2,\n      \"reason\": \"PRICE_CHANGE\"\n    }\n  }\n}"
            }
          ]
        },
        {
          "name": "Approve Waitlist Entry",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"reason\": \"Product meets quality standards and pricing requirements\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/waitlist/{{waitlist_entry_id}}/approve",
              "host": ["{{base_url}}"],
              "path": ["api", "waitlist", "{{waitlist_entry_id}}", "approve"]
            },
            "description": "Approve a waitlist entry, creating or updating the associated product. The payload_json from the waitlist entry will be used to create/update the product. Admin access required."
          },
          "response": [
            {
              "name": "Successful Approval - New Product",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"reason\": \"Product meets quality standards\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/api/waitlist/{{waitlist_entry_id}}/approve",
                  "host": ["{{base_url}}"],
                  "path": ["api", "waitlist", "{{waitlist_entry_id}}", "approve"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"success\": true,\n  \"data\": {\n    \"product_id\": \"e5f6g7h8-9012-34ab-cdef-567890123456\",\n    \"action\": \"created\",\n    \"message\": \"Product created successfully\"\n  }\n}"
            },
            {
              "name": "Successful Approval - Product Update",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"reason\": \"Price update approved\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/api/waitlist/{{waitlist_entry_id}}/approve",
                  "host": ["{{base_url}}"],
                  "path": ["api", "waitlist", "{{waitlist_entry_id}}", "approve"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"success\": true,\n  \"data\": {\n    \"product_id\": \"e5f6g7h8-9012-34ab-cdef-567890123456\",\n    \"action\": \"updated\",\n    \"message\": \"Product updated successfully\"\n  }\n}"
            }
          ]
        },
        {
          "name": "Reject Waitlist Entry",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"reason\": \"Product does not meet quality standards or pricing is incorrect\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/waitlist/{{waitlist_entry_id}}/reject",
              "host": ["{{base_url}}"],
              "path": ["api", "waitlist", "{{waitlist_entry_id}}", "reject"]
            },
            "description": "Reject a waitlist entry with a reason. Admin access required."
          }
        },
        {
          "name": "Bulk Approve Waitlist Entries",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"ids\": [\"f8e9a123-4567-89ab-cdef-123456789abc\", \"a1b2c3d4-5678-90ab-cdef-123456789def\"],\n  \"reason\": \"Bulk approval of validated products\",\n  \"skipInvalid\": true\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/waitlist/bulk/approve",
              "host": ["{{base_url}}"],
              "path": ["api", "waitlist", "bulk", "approve"]
            },
            "description": "Approve multiple waitlist entries in a single operation. Each entry's payload_json will be used to create or update the corresponding product. Set skipInvalid to true to skip entries with validation errors. Admin access required."
          },
          "response": [
            {
              "name": "Successful Bulk Approval",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"ids\": [\"f8e9a123-4567-89ab-cdef-123456789abc\", \"a1b2c3d4-5678-90ab-cdef-123456789def\", \"invalid-id-123\"],\n  \"reason\": \"Bulk approval after validation\",\n  \"skipInvalid\": true\n}"
                },
                "url": {
                  "raw": "{{base_url}}/api/waitlist/bulk/approve",
                  "host": ["{{base_url}}"],
                  "path": ["api", "waitlist", "bulk", "approve"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"success\": true,\n  \"data\": {\n    \"approved\": 2,\n    \"failed\": 1,\n    \"errors\": [\n      {\n        \"id\": \"invalid-id-123\",\n        \"error\": \"Waitlist entry not found\"\n      }\n    ]\n  }\n}"
            }
          ]
        },
        {
          "name": "Bulk Reject Waitlist Entries",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"ids\": [\"{{waitlist_entry_id}}\", \"waitlist_entry_id_2\"],\n  \"reason\": \"Bulk rejection due to quality standards\",\n  \"skipInvalid\": true\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/waitlist/bulk/reject",
              "host": ["{{base_url}}"],
              "path": ["api", "waitlist", "bulk", "reject"]
            },
            "description": "Reject multiple waitlist entries in a single operation. Admin access required."
          }
        }
      ],
      "description": "Waitlist management endpoints for handling product approval workflows, including individual and bulk operations"
    },
    {
      "name": "Audit Log",
      "item": [
        {
          "name": "Get Audit Log Entries",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/audit?page=1&limit=25&actor=admin@example.com&action=approve_new",
              "host": ["{{base_url}}"],
              "path": ["api", "audit"],
              "query": [
                {
                  "key": "page",
                  "value": "1",
                  "description": "Page number for pagination"
                },
                {
                  "key": "limit",
                  "value": "25",
                  "description": "Number of items per page"
                },
                {
                  "key": "actor",
                  "value": "admin@example.com",
                  "description": "Filter by user email",
                  "disabled": true
                },
                {
                  "key": "action",
                  "value": "approve_new",
                  "description": "Filter by action type",
                  "disabled": true
                },
                {
                  "key": "target_type",
                  "value": "",
                  "description": "Filter by target type (product, waitlist_update, etc.)",
                  "disabled": true
                },
                {
                  "key": "target_id",
                  "value": "",
                  "description": "Filter by specific target ID",
                  "disabled": true
                },
                {
                  "key": "from",
                  "value": "",
                  "description": "Start date filter (ISO format)",
                  "disabled": true
                },
                {
                  "key": "to",
                  "value": "",
                  "description": "End date filter (ISO format)",
                  "disabled": true
                }
              ]
            },
            "description": "Get paginated list of audit log entries with extensive filtering options. Admin access required."
          }
        },
        {
          "name": "Get Audit Log Entry Details",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/audit/{{audit_entry_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "audit", "{{audit_entry_id}}"]
            },
            "description": "Get detailed information about a specific audit log entry including state differences and related entries. Admin access required."
          }
        }
      ],
      "description": "Audit log endpoints for tracking all administrative actions and changes in the system"
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:3000",
      "description": "Base URL for the API (change to your deployed URL)"
    },
    {
      "key": "brand_id",
      "value": "",
      "description": "Brand ID for testing (copy from create brand response)"
    },
    {
      "key": "category_id",
      "value": "",
      "description": "Category ID for testing (copy from create category response)"
    },
    {
      "key": "product_id",
      "value": "",
      "description": "Product ID for testing (copy from create product response)"
    },
    {
      "key": "banner_id",
      "value": "",
      "description": "Banner ID for testing (copy from create banner response)"
    },
    {
      "key": "session_id",
      "value": "test-session-123",
      "description": "Session ID for cart testing"
    },
    {
      "key": "cart_id",
      "value": "",
      "description": "Cart ID for testing (copy from cart response)"
    },
    {
      "key": "cart_item_id",
      "value": "",
      "description": "Cart item ID for testing (copy from add item response)"
    },
    {
      "key": "order_id",
      "value": "",
      "description": "Order ID for testing (copy from create order response)"
    },
    {
      "key": "order_number",
      "value": "",
      "description": "Order number for testing (copy from create order response)"
    },
    {
      "key": "variant_id",
      "value": "",
      "description": "Product variant ID for testing (copy from create variant response)"
    },
    {
      "key": "color_red_value_id",
      "value": "",
      "description": "Red color attribute value ID for variant testing"
    },
    {
      "key": "size_large_value_id",
      "value": "",
      "description": "Large size attribute value ID for variant testing"
    },
    {
      "key": "enhanced_product_id",
      "value": "1efbdad3-b582-495e-8484-5f89ea6dffbb",
      "description": "Product ID with enhanced content for testing (Dusch-WC Geberit AquaClean Alba)"
    },
    {
      "key": "pdf_url",
      "value": "",
      "description": "PDF URL for testing (copy from product PDF response)"
    },
    {
      "key": "waitlist_entry_id",
      "value": "",
      "description": "Waitlist entry ID for testing (copy from waitlist entry response)"
    },
    {
      "key": "audit_entry_id",
      "value": "",
      "description": "Audit log entry ID for testing (copy from audit entry response)"
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [""]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [""]
      }
    }
  ]
}
